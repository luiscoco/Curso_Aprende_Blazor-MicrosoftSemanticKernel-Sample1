@page "/AIChatPhi3"
@inject HttpClient Http  // Inject HttpClient for making the API call

<h3>Ask Phi-3 a Question</h3>

<div>
    <label>Enter a prompt:</label>
    <input type="text" @bind="userPrompt" />
</div>
<button @onclick="AskPhi3">Ask Phi-3</button>

@if (!string.IsNullOrEmpty(gptResponse))
{
    <div>
        <h4>Response:</h4>
        <p>@gptResponse</p>
    </div>
}

@code {
    private string userPrompt = string.Empty;
    private string gptResponse = string.Empty;

    private async Task AskPhi3()
    {
        if (string.IsNullOrWhiteSpace(userPrompt))
        {
            return;
        }

        gptResponse = await InvokePhi3Async(userPrompt);
    }

    private async Task<string> InvokePhi3Async(string prompt)
    {
        try
        {
            // Define the endpoint and model settings
            var endpoint = "http://localhost:11434/v1/completions";
            var requestBody = new
            {
                model = "phi3:latest",
                prompt = prompt
            };

            // Serialize the request body
            var content = new StringContent(System.Text.Json.JsonSerializer.Serialize(requestBody), System.Text.Encoding.UTF8, "application/json");

            // Send the POST request
            var response = await Http.PostAsync(endpoint, content);

            if (response.IsSuccessStatusCode)
            {
                // Read and parse the response
                var jsonResponse = await response.Content.ReadAsStringAsync();
                var completionResponse = System.Text.Json.JsonDocument.Parse(jsonResponse);

                // Extract the text from the "choices" array in the response
                var completionText = completionResponse.RootElement
                    .GetProperty("choices")[0]
                    .GetProperty("text")
                    .GetString();

                return completionText ?? "No response";
            }
            else
            {
                return $"Error: Service request failed. Status: {response.StatusCode}";
            }
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"HTTP Request Error: {httpEx.Message}");
            return $"Error: Unable to connect to the Ollama service at http://localhost:11434. Please ensure the service is running.";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"General Error: {ex.Message}");
            return $"Error: {ex.Message}";
        }
    }
}
